version: '3.12'

services:
  bot:
    container_name: bot
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
    volumes:
      - .:/bot/
    restart: always
    ports: 
    - "3012:3012"
    networks:
      - postgres
      
  to_csv:
    container_name: to_csv
    build:
      context: .
      dockerfile: to_csv_dockerfile
    volumes:
      - ~/python-stud-fest/csv/:/file
    networks:
      - postgres

  pgrrs:
    container_name: pgrrs
    hostname: pgrrs
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    env_file:
      - postgres.env
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5437:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d bauman_festival_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres

  migrator:
    container_name: migrator_container
    depends_on: 
      - pgrrs
    env_file:
      - migrator.env
    build:
      context: ./
      dockerfile: ./migrations/Dockerfile
    networks:
      - postgres

networks:
  postgres:
    name: postgres

volumes:
  db-data:
